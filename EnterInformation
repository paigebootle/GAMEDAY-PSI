from tkinter import *
from functools import partial  # to prevent unwanted windows
import random
import re

"""Opens up a screen with entry box to allow for user input.
   Help function links to Help class, team function links to team class. Save_names function appends information to list"""
class Start_Screen:
    def __init__(self, parent):

        # Formatting variables
        background_color = "#90EE90"

        # Initialiseing list to hold player information
        self.player_info_list = []

        # Main menu frame
        self.player_frame = Frame(width=600, height=600, bg=background_color,
                                  pady=200, padx=200)
        self.player_frame.grid()

        # Game Play Heading (Row 0)
        self.main_heading_label = Label(self.player_frame,
                                        text="Game Play",
                                        font=("Arial", "16", "bold"),
                                        bg=background_color,
                                        padx=10, pady=10)
        self.main_heading_label.grid(row=0)

        # User instructions(row 1)
        self.player_information = Label(self.player_frame,
                                        text="Enter your name:",
                                        font=("Arial", "14"), wrap=250,
                                        justify=LEFT,
                                        padx=10, pady=10, bg=background_color)
        self.player_information.grid(row=1)

        # PLayer name entry box
        self.player_name_entry = Entry(self.player_frame, width=20,
                                      font="Arial 14 bold")
        self.player_name_entry.grid(row=2)

        # Conversion buttons frame (row 3), orchid3 | khaki1
        self.continue_button_frame = Frame(self.player_frame)
        self.continue_button_frame.grid(row=3, pady=10)

        self.submit_button = Button(self.continue_button_frame,
                                    highlightbackground='Khaki1',
                                    text="Submit", font="Arial 10 bold",
                                    padx=10, pady=10,
                                    command=lambda: self.save_names())
        self.submit_button.grid(row=0, column=0)

        # Welcome label (row 4)
        self.welcome_label = Label(self.player_frame,
                                   font="Arial 14 bold",
                                   fg="purple", bg=background_color,
                                   pady=10, text="--")
        self.welcome_label.grid(row=4)

        # Team / Help button frame (row 5)
        self.team_help_frame = Frame(self.player_frame)
        self.team_help_frame.grid(row=5, pady=10)

        self.team_button = Button(self.team_help_frame, font="Arial 12 bold",
                                  text="Team List", width=15,
                                  padx=5, pady=5, command=lambda: self.team(self.player_info_list))
        self.team_button.grid(row=0, column=0)

        if len(self.player_info_list) == 0:
            self.team_button.config(state=DISABLED)

        self.help_button = Button(self.team_help_frame, font="Arial 12 bold",
                                  text="Help", width=5,
                                  padx=5, pady=5, command=self.help)
        self.help_button.grid(row=0, column=1)

    def help(self):
        print("You asked for help")
        get_help = Help(self)
        get_help.help_text.configure(text="Enter your player name and number to log in :)")

    def team(self, team_history):
        Team(self, team_history)

    def save_names(self):
        name = self.player_name_entry.get()
        self.player_info_list.append(name)
        print(self.player_info_list)
        self.team_button.config(state=NORMAL)
        self.welcome_label.configure(text=name, fg="blue")


class Team:
    def __init__(self, partner, team_history):
        background = "#a9ef99"

        # disable team button
        partner.team_button.config(state=DISABLED)

        # sets up child window
        self.team_box = Toplevel()

        # If users press cross at to it closes history and 'realeses' history
        self.team_box.protocol('WM_DELETE_WINDOW', partial(self.close_team, partner))

        # Set up GUI Frame
        self.team_frame = Frame(self.team_box, bg=background)
        self.team_frame.grid()

        # Set up team name heading
        self.main_heading = Label(self.team_frame, text="PNGHS 2022 Football Team",
                                 font="Arial 19 bold", bg=background)
        self.main_heading.grid(row=0)

        # team text (label, row 1)
        self.team_text = Label(self.team_frame, text="",
                               justify=LEFT, width=40, bg=background,
                               wrap=250)
        self.team_text.grid(row=1)

        # team text
        self.team_text = Label(self.team_frame,
                               text="Here are your most recent"
                                    " player names. Please use the"
                                    " export button to create a text"
                                    " file of all your calculations for this session",
                               wrap=250, font="arial 10 italic", justify=LEFT, bg=background,
                               fg="maroon", padx=10, pady=10)
        self.team_text.grid(row=1)

        # team output

        # Generate string from list of calculations
        team_string = ""

        if len(team_history) >= 14:
            for item in range(0, 14):
                team_string += team_history[len(team_history) - item - 1] +"\n"

        else:
            for item in team_history:
                team_string += team_history[len(team_history) - team_history.index(item)
                                            -1] + "\n"
                self.team_text.config(text="Here is your team players. ")

        # Label to display calculation history to user
        self.team_names_label = Label(self.team_frame, text=team_string,
                                      bg=background, font="Arial 12", justify=LEFT)
        self.team_names_label.grid(row=2)

        # Export /dismiss button
        self.export_dismiss_frame = Frame(self.team_frame)
        self.export_dismiss_frame.grid(row=3, pady=10)

        # Export button
        self.export_button = Button(self.export_dismiss_frame, text="Export",
                                    font="Arial 12 bold",
                                    command=lambda: self.export(team_history))
        self.export_button.grid(row=0, column=0)

        # Dismiss button
        self.dismiss_button = Button(self.export_dismiss_frame, text="Dismiss",
                                     font="Arial 12 bold",
                                     command=partial(self.close_team, partner))
        self.dismiss_button.grid(row=0, column=1)

    def close_team(self, partner):
        # put history button back to normal
        partner.team_button.config(state=NORMAL)
        self.team_box.destroy()

    def export(self, team_history):
        Export(self, team_history)


class Help:
    def __init__(self, partner):

        background = "orange"

        # disbable help button
        partner.help_button.config(state=DISABLED)

        # sets up child window help box
        self.help_box = Toplevel()
        # If users press cross at to, closes help and 'releases' help button
        self.help_box.protocol('WM_DELETE_WINDOW', partial(self.close_help, partner))

        # set up GUI Frame
        self.help_frame = Frame(self.help_box, bg=background)
        self.help_frame.grid()

        # set up Help heading (row 0)
        self.how_heading = Label(self.help_frame, text="Help / Instructions",
                                 font="arial 14 bold", bg=background)
        self.how_heading.grid(row=0)

        # Help Text (label, row 1)
        self.help_text = Label(self.help_frame, text="",
                               justify=LEFT, width=40, bg=background, wrap=250)
        self.help_text.grid(column=0, row=1)

        # Dismiss button (row 2)
        self.dismiss_btn = Button(self.help_frame, text="Dismiss", width=10, bg="orange",
                                  font="arial 10 bold",
                                  command=partial(self.close_help, partner))
        self.dismiss_btn.grid(row=2, pady=10)

    def close_help(self, partner):
        # put help button back to normal...
        partner.help_button.config(state=NORMAL)
        self.help_box.destroy()


# main routine
if __name__ == "__main__":
    root = Tk()
    root.title("Game Play")
    something = Start_Screen(root)
    root.mainloop()
